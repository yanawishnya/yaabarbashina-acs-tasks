//------------------------------------------------------------------------------
// container.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Конструктор контейнера
Container::Container(): len{0} { }

//------------------------------------------------------------------------------
// Деструктор контейнера
Container::~Container() {
    Clear();
}

//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Container::Clear() {
    for (int i = 0; i < len; ++i) {
        delete storage[i];
    }
    len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void Container::In(ifstream &ifst) {
    while (!ifst.eof()) {
        if ((storage[len] = Text::StaticIn(ifst)) != nullptr) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void Container::InRnd(int size) {
    while (len < size) {
        if ((storage[len] = Text::StaticInRnd()) != nullptr) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Container::Out(ofstream &ofst) {
    ofst << "Container contains " << len << " elements.\n";
    for (int i = 0; i < len; ++i) {
        ofst << i + 1 << ": ";
        storage[i]->Out(ofst);
    }
}

//------------------------------------------------------------------------------
// Сортировка контейнера пузырьком.
void Container::BubbleSort() {
    int right = len - 1;
    Text* temp;
    while (right > 0) {
        int k = 0;
        for (int i = 0; i < right; ++i) {
            if (storage[i]->Quotient() > storage[i + 1]->Quotient()) {
                temp = storage[i + 1];
                storage[i + 1] = storage[i];
                storage[i] = temp;
                k = i;
            }
        }
        right = k;
    }
}
